{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Generative AI Project Template"},{"location":"#try-on-app","title":"Try-On App","text":""},{"location":"#overview","title":"Overview","text":"<p>The Try-On App is an innovative application designed to allow users to virtually try on products (such as clothing, accessories, or similar items) using their device. By leveraging advanced technologies such as image processing and possibly machine learning, the app provides a seamless and interactive experience for users to preview how items would look on them before making a purchase or decision.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Virtual try-on experience for various products</li> <li>User-friendly interface for uploading photos or using live camera</li> <li>Realistic overlay and fitting of items on user images</li> <li>Support for multiple item categories</li> <li>Option to save, share, or download try-on results</li> <li>Responsive design for use on desktop and mobile devices</li> </ul>"},{"location":"#1-getting-started","title":"1. Getting started","text":"<p>This project is a monorepo containing two main packages:</p> <ul> <li><code>frontend</code>: A React application.</li> <li><code>backend</code>: A FastAPI application that serves the AI models and business logic.</li> </ul> <p>The project uses <code>uv</code> as a package manager and is configured as a workspace, so dependencies for both packages can be installed with a single command.</p> <p>The following files are used in the contribution pipeline:</p> <ul> <li><code>.env.example</code>: example of the .env file.</li> <li><code>.env</code> : contains the environment variables used by the app.</li> <li><code>Makefile</code>: contains the commands to run the app locally.</li> <li><code>Dockerfile</code>: the dockerfile used to build the project inside a container. It uses the Makefile commands to run the app.</li> <li><code>.pre-commit-config.yaml</code>: pre-commit hooks configuration file</li> <li><code>pyproject.toml</code>: The root <code>pyproject.toml</code> defines the <code>uv</code> workspace and shared development dependencies.</li> <li><code>frontend/pyproject.toml</code>: Dependencies for the frontend application.</li> <li><code>backend/pyproject.toml</code>: Dependencies for the backend application, including optional dependencies for <code>cpu</code> and <code>cuda</code>.</li> <li><code>.github/workflows/**.yml</code>: GitHub actions configuration files.</li> <li><code>.gitignore</code>: contains the files to ignore in the project.</li> </ul>"},{"location":"#11-local-prerequisites","title":"1.1. Local Prerequisites","text":"<ul> <li>Ubuntu 22.04 or MacOS</li> <li>git clone the repository</li> <li>UV &amp; Python 3.12 (will be installed by the Makefile)</li> <li>Create a <code>.env</code> file (take a look at the <code>.env.example</code> file)</li> </ul>"},{"location":"#12-steps-for-installation","title":"1.2 \u2699\ufe0f Steps for Installation","text":"<p>This project uses a <code>Makefile</code> to simplify the installation and execution process.</p>"},{"location":"#local-installation","title":"Local Installation","text":"<ol> <li> <p>For CPU-based environment (or MacOS)    To install all dependencies for both <code>frontend</code> and <code>backend</code> for a CPU environment, run:    <code>bash    make install-dev</code></p> </li> <li> <p>For NVIDIA GPU (CUDA) environment    If you have an NVIDIA GPU and want to use CUDA for acceleration, run:    <code>bash    make install-dev-cuda</code>    This will install the CUDA-enabled version of PyTorch.</p> </li> </ol>"},{"location":"#using-docker","title":"Using Docker","text":"<p>The project can be fully containerized using Docker. This is the recommended way to run the application as it handles all services and networks. - The <code>docker-compose.yml</code> and <code>docker-compose-cuda.yml</code> files define the services. - To build the main docker image:   <code>bash   make docker-build</code> - To run the entire application stack (frontend, backend, database, Ollama) using Docker Compose:   <code>bash   make run-app</code></p>"},{"location":"#running-the-application","title":"Running the Application","text":"<p>Once installed (either locally or via Docker), you can run the services.</p> <ul> <li> <p>Run Everything:   The <code>make run-app</code> command is the easiest way to start all services, including the frontend, backend, database, and Ollama.</p> </li> <li> <p>Run Services Individually:</p> </li> <li>Run Frontend: <code>make run-frontend</code></li> <li>Run Backend: <code>make run-backend</code></li> </ul> <p>You can then access: - Frontend (NiceGUI): http://localhost:8080 (or the configured port) - Backend (FastAPI): http://localhost:8000 (or the configured port). Docs http://localhost:8000/docs</p>"},{"location":"#using-local-vs-cloud-llms","title":"Using Local vs. Cloud LLMs","text":"<ul> <li>Local model (Ollama):<ul> <li>Ensure Ollama is running (<code>make run-ollama</code> can help).</li> <li>Set your <code>.env</code> file to point to the local Ollama endpoint.</li> <li>Download a model: <code>make download-ollama-model</code></li> <li>Test the connection: <code>make test-ollama</code></li> </ul> </li> <li>Cloud model (OpenAI, Anthropic, etc.):<ul> <li>Update your <code>.env</code> file with the correct API keys and model names, following the LiteLLM naming convention.</li> <li>Test the connection: <code>make test-inference-llm</code></li> </ul> </li> </ul>"},{"location":"#13-steps-for-installation-contributors-and-maintainers","title":"1.3 \u2699\ufe0f Steps for Installation (Contributors and maintainers)","text":"<p>Check the CONTRIBUTING.md file for more information.</p>"},{"location":"#2-contributing","title":"2. Contributing","text":"<p>Check the CONTRIBUTING.md file for more information.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at &lt;&gt;. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4 and 2.0, and was generated by contributing-gen.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to this project","text":"<p>First off, thanks for taking the time to contribute! \u2764\ufe0f</p>"},{"location":"CONTRIBUTING/#1-code-of-conduct","title":"1. Code of Conduct","text":"<p>This project and everyone participating in it is governed by the Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior.</p>"},{"location":"CONTRIBUTING/#2-team-members","title":"2. Team members:","text":"<ul> <li>Amine Djeghri</li> </ul>"},{"location":"CONTRIBUTING/#3-best-practices","title":"3. Best practices \ud83d\udca1","text":"<ul> <li>Docstring your functions and classes, it is even more important as it is used to generate the documentation with Mkdocs</li> <li>If you use an IDE (like pycharm), define src the \"source\" folder and test the \"test\" folder so your IDE can help you auto import files</li> <li> <p>Use the <code>make</code> commands to run your code, it is easier and faster than writing the full command (and check the Makefile for all available commands \ud83d\ude09)</p> <ul> <li>Run Use the pre-commit hooks to ensure your code is formatted correctly and is of good quality</li> <li>UV is powerful (multi-thread, package graph solving, rust backend, etc.) use it as much as you can.</li> <li>If you have a lot of data, use Polars for faster and more efficient dataframe processing.</li> <li>If you have CPU intensive tasks, use multiprocessing with python's pool map.</li> </ul> </li> <li> <p>Exceptions:</p> <ul> <li>Always log the exceptions and errors (use loguru) and then raise them <code>py     except Exception as e:       logger.error(e)  # Log the original error  with a personalized message or with e (only the message will be logged)       raise e # All the stack trace will be logged</code></li> <li>Sometimes, you don't need to raise the exception (in a loop for example) to not interrupt the execution.</li> <li>Use if else instead of catching and raising the exception when possible (log and raise also)   <code>py       if not os.path.exists(file_path):           logger.error(f\"File not found: {file_path}. The current directory is: {os.getcwd()}\")           raise FileNotFoundError(f\"The file {file_path} does not exist.\")</code></li> </ul> </li> </ul>"},{"location":"CONTRIBUTING/#4-how-to-contribute","title":"4. How to contribute","text":""},{"location":"CONTRIBUTING/#41-file-structure-tree","title":"4.1 File structure (\ud83c\udf33 Tree)","text":"<p>Check the readme file.</p>"},{"location":"CONTRIBUTING/#42-steps-for-installation-contributors-and-maintainers","title":"4.2 Steps for Installation (Contributors and maintainers)","text":"<ul> <li>The first step is to install, read and test the project as a user</li> <li>Then you can either develop in a container or develop locally</li> </ul>"},{"location":"CONTRIBUTING/#a-local-development","title":"a. Local development","text":"<ul> <li>Requires Debian (Ubuntu 22.04) or MacOS.</li> <li>Python will be installed using uv.</li> <li> <p>git clone the repository</p> </li> <li> <p>To install the dev dependencies (pre-commit, pytest, ruff...), run <code>make install-dev</code></p> </li> <li>run <code>make pre-commit install</code> to install pre-commit hooks</li> <li>To install the GitHub actions locally, run <code>make install-act</code></li> <li>To install the gitlab ci locally, run <code>make install-ci</code></li> </ul>"},{"location":"CONTRIBUTING/#b-or-develop-in-a-container","title":"b. or Develop in a container","text":"<ul> <li>If you have a .venv folder locally, you need to delete it, otherwise it will create a conflict since the project is mounted in the container.</li> <li>You can run a docker image containing the project with <code>make docker-prod</code> (or <code>make docker-dev</code> if you want the project to be mounted in the container).</li> <li>A venv is created inside the container and the dependencies are installed.</li> </ul>"},{"location":"CONTRIBUTING/#43-run-the-test-to-see-if-everything-is-working","title":"4.3. Run the test to see if everything is working","text":"<ul> <li>Test the package with :<ul> <li><code>make test</code> will run all the tests (requires .env file)</li> </ul> </li> </ul>"},{"location":"CONTRIBUTING/#44-pushing-your-work","title":"4.4. Pushing your work","text":"<ul> <li> <p>Before you start working on an issue, please comment on (or create) the issue and wait for it to be assigned to you. If someone has already been assigned but didn't have the time to work on it lately, please communicate with them and ask if they're still working on it. This is to avoid multiple people working on the same issue. Once you have been assigned an issue, you can start working on it. When you are ready to submit your changes, open a pull request. For a detailed pull request tutorial, see this guide.</p> </li> <li> <p>Create a branch from the dev branch and respect the naming convention: <code>feature/your-feature-name</code>    or <code>bugfix/your-bug-name</code>.</p> </li> <li>Before commiting your code :</li> <li>Run <code>make test</code> to run the tests</li> <li>Run <code>make pre-commit</code> to check the code style &amp; linting.</li> <li>Run <code>make deploy-doc-local</code> to update the documentation locally and test the website.</li> <li>(optional) Commit Messages: This project uses Gitmoji for commit messages. It helps to      understand the purpose of the commit through emojis. For example, a commit message with a bug fix can be prefixed with      \ud83d\udc1b. There are also Emojis in GitHub</li> <li>Manually, merge dev branch into your branch to solve and avoid any conflicts. Merging strategy: merge : dev \u2192      your_branch</li> <li>After merging, run <code>make test</code> and <code>make pre-commit</code> again to ensure that the tests are still passing.</li> <li>Update the version in <code>pyproject.toml</code> file</li> <li>If your project is a python package, run <code>make build-pacakge</code> to build the package and create the wheel in the <code>dist</code> folder</li> <li>Run CI/CD Locally: Depending on the platform you use:</li> <li>GitHub Actions: run <code>make install-act</code> then <code>make act</code> for GitHub Actions</li> <li>Create a pull request. If the GitHub actions pass, the PR will be accepted and merged to dev.</li> </ul>"},{"location":"CONTRIBUTING/#45-for-repository-maintainers-merging-strategies-github-actions-guidelines","title":"4.5. (For repository maintainers) Merging strategies &amp; GitHub actions guidelines**","text":"<ul> <li>Once the dev branch is tested, the pipeline is green, and the PR has been accepted, you can merge with a 'merge'   strategy.</li> <li>DEV \u2192 MAIN: Then, you should create a merge from dev to main with Squash strategy.</li> <li>MAIN \u2192 RELEASE: The status of the ticket will change then to 'done.'</li> </ul>"}]}